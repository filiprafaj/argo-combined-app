apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: argo-combined-app
  labels:
    app: argo-combined-app
spec:
  # do not include replicas in the manifests if you want replicas to be controlled by HPA
  replicas: 1
  selector:
    matchLabels:
      app: argo-combined-app
  template:
    metadata:
      annotations:
        linkerd.io/inject: enabled
      labels:
        app: argo-combined-app
    spec:
      imagePullSecrets:
      - name: regcred
      containers:
      - name: argo-combined-app
        image: filiprafaj/argo-combined-app
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /
            port: 80
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 80m
            memory: 128Mi
  strategy:
    canary:
      # Reference to a Service which the controller will update to point to the canary ReplicaSet
      canaryService: argo-combined-app-canary
      # Reference to a Service which the controller will update to point to the stable ReplicaSet
      stableService: argo-combined-app
      trafficRouting:
        smi: {}
        # istio:
        #   virtualService:
        #     name: argo-combined-app
        #     routes:
        #     - primary
      steps:
      - setWeight: 10
      - pause: {duration: 2m}
      - setWeight: 30
      - pause: {duration: 30s}
      - setWeight: 50
      - pause: {duration: 30s}
#       analysis:
#         templates:
#         - templateName: argo-combined-app
#         startingStep: 2
#         args:
#         - name: service-name
#           value: "argo-combined-app-canary.production.svc.cluster.local"

# ---

# apiVersion: argoproj.io/v1alpha1
# kind: AnalysisTemplate
# metadata:
#   name: argo-combined-app
# spec:
#   args:
#   - name: service-name
#   metrics:
#   - name: success-rate
#     interval: 10s
#     successCondition: result[0] >= 0.8
#     failureCondition: result[0] < 0.8
#     failureLimit: 3
#     provider:
#       prometheus:
#         address: http://prometheus-server.monitoring
#         query: |
#           sum(irate(
#             istio_requests_total{
#               reporter="source",
#               destination_service=~"{{args.service-name}}",
#               response_code=~"2.*"
#             }[2m]
#           )) / sum(irate(
#             istio_requests_total{
#               reporter="source",
#               destination_service=~"{{args.service-name}}"
#             }[2m]
#           ))
#   - name: avg-req-duration
#     interval: 10s
#     successCondition: result[0] <= 1000
#     failureCondition: result[0] > 1000
#     failureLimit: 3
#     provider:
#       prometheus:
#         address: http://prometheus-server.monitoring
#         query: |
#           sum(irate(
#             istio_request_duration_milliseconds_sum{
#               reporter="source",
#               destination_service=~"{{args.service-name}}"
#             }[2m]
#           )) / sum(irate(
#             istio_request_duration_milliseconds_count{
#               reporter="source",
#               destination_service=~"{{args.service-name}}"
#             }[2m]
#           ))

---

apiVersion: v1
kind: Service
metadata:
  name: argo-combined-app-canary
  labels:
    app: argo-combined-app
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: argo-combined-app
